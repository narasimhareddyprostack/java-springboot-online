Java - Object Oriented Programming Language
-------------------------------------------

class Test{
public static void main(String[] args){
 System.out.println("Hello, world');
 }
}

After Installing Java into machine.

Why we need to set the classpath/patch
how to set the classpath?
>javac 
working fine.


C:\Program Files\Java\jdk-16.0.2\bin

goto->Env variable -> 


comipler / Interpretator
--------
comipler is software it convert high-level code to low level binary format code.
Human Readable format to machine readable binary format.

Java is comipler based programming laguage.

how to create java program?
how to compile?  javac 
how to execute?  java


Java Programming features?

Object Oriented Programming Language
Simple
platform indipendetn
Architectural Neutral
Portable
Multithreaded
Distributed and networked
High Performance
Secure & Robust
==========================================
Identifier
A name in java program is called identifier. It can be 
class name 
variable name 
method 
label name 

class Test{
	public static void mian(String[] args){
	int x = 100;
   }
}

Rules to define identifier:
The only allowed characters in java identifier are :

a to Z 
A to Z
0 to 9 
_
& 

If we are using any other characters we will get compile Time Error.

class #Order{}  - Error 

2)Identifier can't start with digit.

class 9Test{}   - Not allowed   
class Test9{}

3)Identifier are case Sensitive 
int a = 100;
int A = 100;
class Test{}
class TEST{}

4)There is no lenght limit for java identifiers.
 
class Testttttttttttttttttttt{}

5)We cant use Reserved words/keywords are identifiers.


Which of the following are valid identifiers?

9Test        - No 
total_Order_Cost - Yes 
_Test_      - Yes
total#      - No 
int         - No 
Integer     - ok 

Data Type
-----------
Java is Strictly Typed Programming Language.

Java Programming Language - 3 Data types 
1.Pre-defined / Premitive Data Types 
2.Derived Data Types       
3.User Defined Data Types / Object 

Primitive Data Types 

byte: - 
====
size : 8 bits (1 Byte)
Max_Value: 127 
Min_Value: -128
Range : -128 to 127 

short :
==========
size: 2 - byte
Range :-32768  to 32767 

summary of primitive Data Types:
        
byte    1-byte 
short   2-byte 
int     4-byte 
long    8-byte 

float    4-byte
double   8-byte

char     2-byte 
boolean  N/A

2.Derived Data Type 

int size[] = {38, 40 ,42, 44};
String names[] = {"Narasimha","Suchitra", "Srikanth"};


3.User Defined Data Types(Objects)



Arrays
============

Array is indexed collection of fixed no of homogenous data elements.

-group of homogenous data elements as one entity - nothing but array

Array Declaration
1.int[] a;     a is int array 
2.int a[];
3.int []a;

and 
Array Creation

int[] a = new int[3];


length - It represetns the size of array 
        -It is final variable applicable for arrays.
length() - it is final method applicable for string object.
        -It represents the no of characters in string.
		
Java Operators
=====================
Arithmatic 
incr/decr operation  ++ --
Relational  >, >= , <, <=
Logical 
Unary Operators
Ternary Operators
New, instanceOf 
Bitwise Operators 


int a = 10;

++a;
a++;



Rules for Incr and Decr operators:

We can apply increment and decrement only variables.
not for constant values. 


We can apply incr and decr operators 
for every primitive data type except boolean.

double ratings = 4.3;
ratings++;

char size = 's';
size++;

=================================================
Operators - class 2 
-------------------
incr/decr operation  ++ --
Relational  >, >= , <, <=
Logical 
Unary Operators
Ternary Operators
New, instanceOf 
Bitwise Operators 

String concatination Operator (+):
-------------------------------
+ - overloaded operator in java.
addition 
concatination

Relational Operators: > >=  < <= 
---------------------------------
apply Relational operators for every primitive data type
except boolean
we cant apply these relational operators for objects types


class Test{
   public  static void main(String[] args){
        String ename1 = new String("Rahul");
        String ename2 = new String("Rahul");
        System.out.println(ename1 > ename2);
    }   
}


Equality Operators:  ==  != 
We apply equality operators for every primitive type.
We apply equality operators for object reference also.

class Test{
   public  static void main(String[] args){
            String ename1 = new String("Rahul");
            String ename2 = new String("Rahul");
            System.out.println(ename1 == ename2);  //false -ref comparision 
            System.out.println(ename1.equals(ename2)); // true - content comparision
            
    }   
}



Assignment Operation : = 
int x = 10; 

1.simple Assignment  
2.chined Assignment
3.compound Assignment

int a,b,c,d; //declartion
a=b=c=d=20; //initilization


compound assignment 
------------------
+=
-=
*=

Ternary Operator(? : )

int a = 100;
int b= 200;
int emp_id = (a<b) ? 101 : 201



class Test{
   public  static void main(String[] args){
           int a =100, b = 200;
           int emp_id = a > b ? 101  : false? 200:300; 
           System.out.println(emp_id);             
    }   
}

Control flow
------------
describe the order in which statement will be execute at runtime.

conditional flow 
-----------------------
if
if-else 
switch 

iterative flow 
----------------------
for(){}
while(){}
do{}while()
for each 

Transfer Statement 
-----------------------
break
continue 
return 


if statement:
if(condition){
//true block
}


if("salman khan"){
	clg("Hello, Mr");
}

The argument to the if statement should be boolean type.
If we ar providing any other type - we get compile time error.

class Test{
   public  static void main(String[] args){
           if(1){
                System.out.println("Hello, Good Evening");  
           }
                     
    }   
}


Test.java:3: error: incompatible types: int cannot be converted to boolean
           if(1){
              ^
1 error
===========================================
Control Flow 

Iterative flow 

for(){}
while 
do while()
for each loop 


while: If we dont know the no of iterations in 
advaance then we will go for / best suitable loop 
is while

do-while(): If we want execute loop statement atleast once then we go for do while.


class Test{
   public  static void main(String[] args){
            int i=1;
            do{
            System.out.println("Hello,"); 
            i++;
            }while(i<=5);
            /*  int i=1;
             while(i<=5){
                    System.out.println("Hello,"); 
                    i++;
             } */
            /* for(int i=1; i<=5; i++){
             System.out.println("Hello,"); 
            }   */            
    }   
}


do-while(): do something untile condition false.

for-each():(Enhanced for Loop)
Introduced in 1.5 (Java 5 version)

- arrays and collections 
for-each loop is the most convinent loop to retrieve the elemetns from array and collections.

break Statement:
-----------------
switch
loops(for, while, dowhile)


continue: skip the current iteratin and continue the next iteration.


Packages

package com.greetlabs.user;
public class A{}

It is an mechanism to group related classes and interfaces 
into a single module.

The main purpose is 
1)improve the modularity 
2)Provide security
3)To resolve naming conflicts 

>javac -d . Test.java 
-d - destination
. - current working dir

access modifierl

class modifiers - public final abstract strict default

class A{}
- whether our class can accessed from any where or not?
- Whether child class creation is possible for our class or not ?
- whether instanciation is possible or not 

  A a = new A()



Applicable modifer for top-level classes :

public 
default
final
abstract
strictfp

Test.java 

private class Test{}

error: modifier private not allowed here

Inner class - Level - access modifiers 

public 
private 
protected
final
strictfp
abstract 
static 
default 

Top Class -Level Access modifiers 
public 
default 
final
abstract 
strictfp 

final Modifiers: 
final modifer applicable for class , methods and variables.

final class Outer{
final void m1(){
 final int x = 100 ;
}
}

if method declared as the final then we are not allowed to override the method in child classes.

class Parent{
final void display(){}
}
class child extends Parent{
void display(){
}
}


class Parent{
public final void display(){}
}
class child extends Parent{
void display(){
}
}


display() in child cannot override display() in Parent

If a class declared as final then we can't create child classes.


final class Parent{}
class Child extends Parent{} 
Compile-Time 
cannot inherit from final Parent
class Child extends Parent{}

final class A{
void m1(){}
void m2(){}
}  
Note:Every method present inside a final class is always final by default.
 but every variable present inside a final need not be final.
 
Main Adv : we are achiving security as no one is allowed to to change our logic or implimentation 
Dis Adv  : We are loosing inheritance & Polymorpism 


abstract: abstract modifier applicable for 
classes and method's but not for variable.  

final    : Talk about implimentation
abstract : Never Talks about implimentation

abstract method: 


int display(){}  - implimentation is available.
abstract int display();   - No implimentation 


abstract class Test {
    abstract void display(){};    
}
abstract methods cannot have a body
    abstract void display(){}; 

	
Note: 
Illegal combination of modifers for methods 
	
abstract vs - final 
              static 
			  synchronizied 
			  strictfp 
			  native 
			  private 
			  
error: illegal combination of modifiers: abstract and final
abstract final void display(); //no implimentation 
	
abstract class:


Interface:


class Test{

}
Test t = new Test();
instanciation/object creation .

For any classtion(creation of object)
then we will go for abstract class.

for abstract classes instanciation is not possible.

abstract class Test {
   
}
class Display{
Test t = new Test();
}

Test is abstract; cannot be instantiated.


final - class, method, variable 
      - child class - not possible 
	  - method - override is possible.
abstract - modifer applicable for classes and method.


Interface: 100 % abstract class
----------
Any service requiremnt specification(SRS) is consider as interface.

Adv:
We can achive security.we  are not highlighting our internal implimentation.

interface Test{
void m1();
void m2();
}

enchancement will become easy.

Two different systems are communicating using interface.


class to class - extends
class to interace - implements 

extends vs implements 
---------------------
an class can extends only one class at time.


class P{}
class C extends P{}

an class can extends only one class at time.
A class can implements any no of interfaces at a time. 

interface A{} 
interface B{}
class Test implements A, B{
}


===========================================

abstract class Test {
abstract void m1();
abstract void m2();
void m3(){}
}
class Child extends Test {
void m1(){}
void m2(){}

}

an class can extends only one class at time.

A class can implements any no of interfaces at a time. 

3.A class can extend a class and 
we can implements n no of interface.

interface A{}
interace B{}

class Test{}
class Demo extends Test implements A,B{}

1.An class can extends only one class at time.

2.A class can implements any no of interfaces at a time. 

3.A class can extend a class and 
we can implements n no of interface.

4. An interace can extends any no of interface at a time.

interface A{}
interface B{} 
interface C{}

interface Main extends A,B,C{}




interface A{
    void m1();
    public abstract void m2();
}
class Test implements A {
  public void m1(){}
  public void m2(){}
}
//wheather we are declaring or not every interface method is by default - 
// abstract and public 

interface  variable
-----------------------

interface A{
  static public final  int x = 10;
}
class Demo implements A{
 
    public static void main(String[] args){
        
        System.out.println(x);
    }
}

/*
Note1:interface method - public  and abstract
Note2:interface variable- public, final, static
*/

public: To make variable available for every implimentation class 
static: without existing object , we are going to access
final: implimentation class can access variable, but not modify.



===============================================
class extends class. 
class implements interface's  

abstract class A{
abstract void m1();
public final int x = 100;
}

class B extends A {
public void m1(){}
public static void main(String[] args){
	B b  = new B();
	System.out.println(b.x);
}
}


=========================================
class - is template to construct objects.
Once class is there - we can as many object with help new keywords.


Object oriented Programming 
class 
this 
constructor 
Method Signature

overriding
overloading

Data Hiding 

Abstract
Encapusaltion
Inheritance
polymoriphism



Data Hiding?
Hiding of of data , so that outside person cant access our data directly.

-By using private modifers we can implement data hiding.

class Test{
	private int id = 101;
}

The main advatage of data hiding features we can achive security.

Abstraction:

Inheritance:
class P{}
class C extends P{}


The main advatage of Inheritance is -code Reusability.


=============================
constructor: special method to initilize object values.

Object creation is not enought, compulsary we should perform
initilization.

class Name , Constructor name should same.

when ever we are creting an object , some piecel of code will executed automatially to perfrom initilization.

new Product();


main objective of constructor is to perform initilization for newly created object.

Rules to define constructor?

1.The name of the class and name of constructor must be matched.
2.return type concept is not applicable.


class Test{
Test(){
    System.out.println("constr");
}
void Test(){
    System.out.println("method");
}
public static void main(String[] args){
    new Test();
}
}

applicable modifers for constructor is 
 - public 
 - private 
 - protected 
 - default 
 
If we are trying to use any other modifers we will Compile time error.

class Test{
final Test(){
    System.out.println("constr");
}
public static void main(String[] args){
    new Test();
}
}

Default Constructor
------------------
case 1:
If we are not writing any constructor them compiler will always generate default constructor.

class Test{

}

case 2: 
If we are writing one constructor, then compiler
 wont generate default constructor.
a) It is always no argument constructor
 class Test{
    Test(){
       super();
    }
}
b) the access modifier of default constructor is same as class modifier.
public class Test{
    public Test(){
       super();
    }
}

===========================
Encapusaltion:

class Test{
variable + methods 
}
-It is process of binding data and code into one unit.
-It is process of binding data(instance variables) and code (methods) as one unit.
- class - private variable and setter/getter - 



================================
public    - global
protected - same package + diff package - with sub class 
default - same package  
private - with in class only. 


package pack1;
class A{
public void m1(){
}
}

package pack2;
import pack1.A;
class B{
A a = new A();
a.m1();
}

package
java.lang.*
---------------------
we are not required to import java.lang package explicitly
because by default is available for every java program

Test.java 

import java.lang.*

class Test{

}

What it contains?
commonly required classes and interface available in java.lang package.

Object class
String
StringBuffer 
StringBuilder
Wrapper Class

class Object{
}

class A{}

class B extends A{

}

Object class methods
----------------------
public String toString()
public native int hashCode()
public boolen equals(Object ojb)
public final Class getClass()
clone()
finalize()
wait()
wait()
wait()
notify()
notifyAll()

toString()
------------
to get string representation of object.

class Test{
	public static void main(String[] args){
		Test t = new Test();
		System.out.print(t);
		System.out.print(t.toString());
	}
}

Object class toString();

public String toString(){
retrun getClass().getName+"@"
       +Integer.toHexaString(hashCode());
}



Note: In String, StringBuffer class, all Wrapper classes 
all collection classes 
toString() method is overridden for meaning String notaiton.

