Java - Object Oriented Programming Language
-------------------------------------------

class Test{
public static void main(String[] args){
 System.out.println("Hello, world');
 }
}

After Installing Java into machine.

Why we need to set the classpath/patch
how to set the classpath?
>javac 
working fine.


C:\Program Files\Java\jdk-16.0.2\bin

goto->Env variable -> 


comipler / Interpretator
--------
comipler is software it convert high-level code to low level binary format code.
Human Readable format to machine readable binary format.

Java is comipler based programming laguage.

how to create java program?
how to compile?  javac 
how to execute?  java


Java Programming features?

Object Oriented Programming Language
Simple
platform indipendetn
Architectural Neutral
Portable
Multithreaded
Distributed and networked
High Performance
Secure & Robust
==========================================
Identifier
A name in java program is called identifier. It can be 
class name 
variable name 
method 
label name 

class Test{
	public static void mian(String[] args){
	int x = 100;
   }
}

Rules to define identifier:
The only allowed characters in java identifier are :

a to Z 
A to Z
0 to 9 
_
& 

If we are using any other characters we will get compile Time Error.

class #Order{}  - Error 

2)Identifier can't start with digit.

class 9Test{}   - Not allowed   
class Test9{}

3)Identifier are case Sensitive 
int a = 100;
int A = 100;
class Test{}
class TEST{}

4)There is no lenght limit for java identifiers.
 
class Testttttttttttttttttttt{}

5)We cant use Reserved words/keywords are identifiers.


Which of the following are valid identifiers?

9Test        - No 
total_Order_Cost - Yes 
_Test_      - Yes
total#      - No 
int         - No 
Integer     - ok 

Data Type
-----------
Java is Strictly Typed Programming Language.

Java Programming Language - 3 Data types 
1.Pre-defined / Premitive Data Types 
2.Derived Data Types       
3.User Defined Data Types / Object 

Primitive Data Types 

byte: - 
====
size : 8 bits (1 Byte)
Max_Value: 127 
Min_Value: -128
Range : -128 to 127 

short :
==========
size: 2 - byte
Range :-32768  to 32767 

summary of primitive Data Types:
        
byte    1-byte 
short   2-byte 
int     4-byte 
long    8-byte 

float    4-byte
double   8-byte

char     2-byte 
boolean  N/A

2.Derived Data Type 

int size[] = {38, 40 ,42, 44};
String names[] = {"Narasimha","Suchitra", "Srikanth"};


3.User Defined Data Types(Objects)



Arrays
============

Array is indexed collection of fixed no of homogenous data elements.

-group of homogenous data elements as one entity - nothing but array

Array Declaration
1.int[] a;     a is int array 
2.int a[];
3.int []a;

and 
Array Creation

int[] a = new int[3];


length - It represetns the size of array 
        -It is final variable applicable for arrays.
length() - it is final method applicable for string object.
        -It represents the no of characters in string.
		
Java Operators
=====================
Arithmatic 
incr/decr operation  ++ --
Relational  >, >= , <, <=
Logical 
Unary Operators
Ternary Operators
New, instanceOf 
Bitwise Operators 


int a = 10;

++a;
a++;



Rules for Incr and Decr operators:

We can apply increment and decrement only variables.
not for constant values. 


We can apply incr and decr operators 
for every primitive data type except boolean.

double ratings = 4.3;
ratings++;

char size = 's';
size++;

=================================================
Operators - class 2 
-------------------
incr/decr operation  ++ --
Relational  >, >= , <, <=
Logical 
Unary Operators
Ternary Operators
New, instanceOf 
Bitwise Operators 

String concatination Operator (+):
-------------------------------
+ - overloaded operator in java.
addition 
concatination

Relational Operators: > >=  < <= 
---------------------------------
apply Relational operators for every primitive data type
except boolean
we cant apply these relational operators for objects types


class Test{
   public  static void main(String[] args){
        String ename1 = new String("Rahul");
        String ename2 = new String("Rahul");
        System.out.println(ename1 > ename2);
    }   
}


Equality Operators:  ==  != 
We apply equality operators for every primitive type.
We apply equality operators for object reference also.

class Test{
   public  static void main(String[] args){
            String ename1 = new String("Rahul");
            String ename2 = new String("Rahul");
            System.out.println(ename1 == ename2);  //false -ref comparision 
            System.out.println(ename1.equals(ename2)); // true - content comparision
            
    }   
}



Assignment Operation : = 
int x = 10; 

1.simple Assignment  
2.chined Assignment
3.compound Assignment

int a,b,c,d; //declartion
a=b=c=d=20; //initilization


compound assignment 
------------------
+=
-=
*=

Ternary Operator(? : )

int a = 100;
int b= 200;
int emp_id = (a<b) ? 101 : 201



class Test{
   public  static void main(String[] args){
           int a =100, b = 200;
           int emp_id = a > b ? 101  : false? 200:300; 
           System.out.println(emp_id);             
    }   
}

Control flow
------------
describe the order in which statement will be execute at runtime.

conditional flow 
-----------------------
if
if-else 
switch 

iterative flow 
----------------------
for(){}
while(){}
do{}while()
for each 

Transfer Statement 
-----------------------
break
continue 
return 


if statement:
if(condition){
//true block
}


if("salman khan"){
	clg("Hello, Mr");
}

The argument to the if statement should be boolean type.
If we ar providing any other type - we get compile time error.

class Test{
   public  static void main(String[] args){
           if(1){
                System.out.println("Hello, Good Evening");  
           }
                     
    }   
}


Test.java:3: error: incompatible types: int cannot be converted to boolean
           if(1){
              ^
1 error
===========================================
Control Flow 

Iterative flow 

for(){}
while 
do while()
for each loop 


while: If we dont know the no of iterations in 
advaance then we will go for / best suitable loop 
is while

do-while(): If we want execute loop statement atleast once then we go for do while.


class Test{
   public  static void main(String[] args){
            int i=1;
            do{
            System.out.println("Hello,"); 
            i++;
            }while(i<=5);
            /*  int i=1;
             while(i<=5){
                    System.out.println("Hello,"); 
                    i++;
             } */
            /* for(int i=1; i<=5; i++){
             System.out.println("Hello,"); 
            }   */            
    }   
}


do-while(): do something untile condition false.

for-each():(Enhanced for Loop)
Introduced in 1.5 (Java 5 version)

- arrays and collections 
for-each loop is the most convinent loop to retrieve the elemetns from array and collections.

break Statement:
-----------------
switch
loops(for, while, dowhile)


continue: skip the current iteratin and continue the next iteration.


Packages

package com.greetlabs.user;
public class A{}

It is an mechanism to group related classes and interfaces 
into a single module.

The main purpose is 
1)improve the modularity 
2)Provide security
3)To resolve naming conflicts 

>javac -d . Test.java 
-d - destination
. - current working dir

access modifierl

class modifiers - public final abstract strict default

class A{}
- whether our class can accessed from any where or not?
- Whether child class creation is possible for our class or not ?
- whether instanciation is possible or not 

  A a = new A()



Applicable modifer for top-level classes :

public 
default
final
abstract
strictfp

Test.java 

private class Test{}

error: modifier private not allowed here